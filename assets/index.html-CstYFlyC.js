import{_ as a}from"./douban-DT6lsHYO.js";import{_ as i,c as s,a as n,b as e,d as r,w as o,r as u,o as h,e as d}from"./app-s25-7jI4.js";const p={};function g(f,t){const l=u("RouteLink");return h(),s("div",null,[t[23]||(t[23]=n('<h1 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h1><p><img src="'+a+'" alt=""></p><p>这是一本关于软件设计的书（英文原名：A Philosophy of Software Design）：如何将复杂的软件系统分解成模块（比如类和方法），以便这些模块可以相对独立地实现。本书首先介绍了软件设计的基本问题，也就是对复杂性的管理，然后讨论了一些在完成软件设计的过程中涉及到的哲学问题，并提出了一系列可以在软件设计过程中应用的设计原则。本书还介绍了一些可用来识别设计问题的危险信号。你可以通过应用本书中的想法来减少大型软件系统的复杂性，以便能更快地编写软件。</p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2>',4)),e("ul",null,[e("li",null,[r(l,{to:"/preface.html"},{default:o(()=>t[0]||(t[0]=[d("前言")])),_:1})]),e("li",null,[r(l,{to:"/ch01.html"},{default:o(()=>t[1]||(t[1]=[d("第 1 章 介绍")])),_:1})]),e("li",null,[r(l,{to:"/ch02.html"},{default:o(()=>t[2]||(t[2]=[d("第 2 章 复杂性的本质")])),_:1})]),e("li",null,[r(l,{to:"/ch03.html"},{default:o(()=>t[3]||(t[3]=[d("第 3 章 能工作的代码是不够的")])),_:1})]),e("li",null,[r(l,{to:"/ch04.html"},{default:o(()=>t[4]||(t[4]=[d("第 4 章 模块应该是深的")])),_:1})]),e("li",null,[r(l,{to:"/ch05.html"},{default:o(()=>t[5]||(t[5]=[d("第 5 章 信息隐藏和信息泄露")])),_:1})]),e("li",null,[r(l,{to:"/ch06.html"},{default:o(()=>t[6]||(t[6]=[d("第 6 章 通用的模块是更深的")])),_:1})]),e("li",null,[r(l,{to:"/ch07.html"},{default:o(()=>t[7]||(t[7]=[d("第 7 章 不同的层级，不同的抽象")])),_:1})]),e("li",null,[r(l,{to:"/ch08.html"},{default:o(()=>t[8]||(t[8]=[d("第 8 章 下沉复杂性")])),_:1})]),e("li",null,[r(l,{to:"/ch09.html"},{default:o(()=>t[9]||(t[9]=[d("第 9 章 在一起更好还是分开更好？")])),_:1})]),e("li",null,[r(l,{to:"/ch10.html"},{default:o(()=>t[10]||(t[10]=[d("第 10 章 通过定义来规避错误")])),_:1})]),e("li",null,[r(l,{to:"/ch11.html"},{default:o(()=>t[11]||(t[11]=[d("第 11 章 设计两次")])),_:1})]),e("li",null,[r(l,{to:"/ch12.html"},{default:o(()=>t[12]||(t[12]=[d("第 12 章 不写注释的四个借口")])),_:1})]),e("li",null,[r(l,{to:"/ch13.html"},{default:o(()=>t[13]||(t[13]=[d("第 13 章 注释应该描述代码中难以理解的内容")])),_:1})]),e("li",null,[r(l,{to:"/ch14.html"},{default:o(()=>t[14]||(t[14]=[d("第 14 章 选取名称")])),_:1})]),e("li",null,[r(l,{to:"/ch15.html"},{default:o(()=>t[15]||(t[15]=[d("第 15 章 先写注释")])),_:1})]),e("li",null,[r(l,{to:"/ch16.html"},{default:o(()=>t[16]||(t[16]=[d("第 16 章 修改现有的代码")])),_:1})]),e("li",null,[r(l,{to:"/ch17.html"},{default:o(()=>t[17]||(t[17]=[d("第 17 章 一致性")])),_:1})]),e("li",null,[r(l,{to:"/ch18.html"},{default:o(()=>t[18]||(t[18]=[d("第 18 章 代码应该是易理解的")])),_:1})]),e("li",null,[r(l,{to:"/ch19.html"},{default:o(()=>t[19]||(t[19]=[d("第 19 章 软件发展趋势")])),_:1})]),e("li",null,[r(l,{to:"/ch20.html"},{default:o(()=>t[20]||(t[20]=[d("第 20 章 性能设计")])),_:1})]),e("li",null,[r(l,{to:"/ch21.html"},{default:o(()=>t[21]||(t[21]=[d("第 21 章 结论")])),_:1})]),e("li",null,[r(l,{to:"/summary.html"},{default:o(()=>t[22]||(t[22]=[d("总结")])),_:1})])]),t[24]||(t[24]=n('<h2 id="翻译说明" tabindex="-1"><a class="header-anchor" href="#翻译说明"><span>翻译说明</span></a></h2><p>无意中看到这本书的相关介绍，也很快找到了 GitHub 上的民间翻译版，因为看到一些翻译不太恰当的地方，所以想着顺手提交修正下，然后找到其中 Star 数量比较多的主要是 <a href="https://github.com/Cactus-proj/A-Philosophy-of-Software-Design-zh" target="_blank" rel="noopener noreferrer">Cactus-proj</a> 和 <a href="https://github.com/Go7hic/A-Philosophy-of-Software-Design" target="_blank" rel="noopener noreferrer">Go7hic</a> 的，但两者的内容几乎完全一样，包括一些翻译不当的地方也是同样的。从实质内容的提交历史来看，应该 Cactus-proj 是更早的提交者，这一点从各自的 Fock/Star 数量也能侧面印证。</p><p>这两个项目均有收到并处理一些内容修正的 PR，但即使是 Cactus-proj，最新的几个 PR 也处于较长时间未处理的状态，推测都已经暂停维护了，然后基于 Cactus-proj，包含内容修复最多的是 <a href="https://github.com/luojiego/A-Philosophy-of-Software-Design-zh" target="_blank" rel="noopener noreferrer">luojiego</a> 的 Fork，于是就基于这个创建了自己的 <a href="https://github.com/yingang/aposd-zh" target="_blank" rel="noopener noreferrer">Fork</a>。除了一边阅读一边校对，也摸索着更新了相关的部署脚本，部署到我自己的 <a href="https://yingang.github.io/aposd-zh/" target="_blank" rel="noopener noreferrer">GitHub Pages</a> 上，可直接在线阅读。</p><p>从提交历史来看，<a href="https://github.com/gdut-yy" target="_blank" rel="noopener noreferrer">gdut-yy</a> 应该是主要的翻译贡献者，<a href="https://github.com/liquid207" target="_blank" rel="noopener noreferrer">liquid207</a>、<a href="https://github.com/wanghuanwei" target="_blank" rel="noopener noreferrer">wanghuanwei</a>、<a href="https://github.com/luojiego" target="_blank" rel="noopener noreferrer">luojiego</a> 和 <a href="https://github.com/BlackGlory" target="_blank" rel="noopener noreferrer">BlackGlory</a> 也都贡献了比较多的翻译修正，<a href="https://github.com/inkydragon" target="_blank" rel="noopener noreferrer">inkydragon</a> 则主要负责了 LaTeX 和 PDF 相关的工作以及格式规范、持续集成等方面的工作，不确定历史是否挖掘充分，所有提到未提到的贡献者，一并感谢！</p><p>出于尊重原作版权的考虑，在完整的校订工作完成之后，我删除了与中文并列对照的英文内容，对于纯英文内容也删除了主体部分，只保留了前言以及各个章节的概要和总结。如果你在阅读过程中，发现有翻译不当的地方，或者有其他建议，欢迎提交相应的 PR 或 Issue。</p><p>另外，同时还基于 <code>opencc</code> 使用 Python 脚本自动生成了繁体中文的翻译版本，也一并放在了 <a href="https://yingang.github.io/aposd-zh/zh-tw/" target="_blank" rel="noopener noreferrer">GitHub Pages</a> 上，如果发现有处理不当的内容，请针对该脚本或对应的简体中文内容提交 PR 或 Issue。</p><h2 id="术语翻译" tabindex="-1"><a class="header-anchor" href="#术语翻译"><span>术语翻译</span></a></h2><p>翻译是个比较困难的事情，除了译者水平有限，也有很多见仁见智的地方，所以这里先列出一些术语的翻译选择和背后的考虑因素，以供参考，并至少在本书籍的翻译过程中保持相对统一，也欢迎提 Issue 探讨。</p><table><thead><tr><th>英文</th><th>中文</th><th>说明</th></tr></thead><tbody><tr><td>bug</td><td>缺陷 / 代码缺陷</td><td>没有用“错误”是希望避免与 error 等术语的翻译混淆</td></tr><tr><td>change</td><td>变更</td><td>针对代码的时候，更多使用“变更”而不是“改变”，但根据实际的上下文而定</td></tr><tr><td>clean</td><td>整洁的</td><td>与《代码整洁之道》等系列书籍的翻译保持一致</td></tr><tr><td>complexity</td><td>复杂性</td><td>没有用“复杂度”，类似的还有“依赖性（dependency）”和“模糊性（obscurity）”</td></tr><tr><td>deep module / class</td><td>深模块 / 深类</td><td>没有用“深层的”是希望避免与 layer 和 level 等术语的翻译混淆</td></tr><tr><td>define error out of existence</td><td>通过定义来规避错误</td><td>类似的还有“通过设计来规避特殊情况（design special cases out of existence）”</td></tr><tr><td>dispatcher</td><td>分发器</td><td>没有用“调度器”是希望避免与 scheduler 等术语的翻译混淆</td></tr><tr><td>information leakage</td><td>信息泄露</td><td>没有用“泄漏”</td></tr><tr><td>obvious</td><td>易理解的</td><td>在描述代码的特性时一般会译为“易理解的”（主要是第 13 章和第 18 章），反之就是“难以理解的”，而其他场景下可能仍译为“明显的”或“显而易见的”</td></tr><tr><td>pass-through</td><td>透传</td><td>用于“透传方法”、“透传变量”、“透传参数”等场景</td></tr><tr><td>public method / variables</td><td>公有方法 / 公有变量</td><td>没有用“公开”是希望避免与 expose 和 exposure 等术语的翻译混淆</td></tr><tr><td>selection</td><td>区域选择 / 选择的区域 / 所选区域</td><td>图像界面文本编译器中的示例，直接翻译成“选择”会不太清晰</td></tr><tr><td>shallow module / class</td><td>浅模块 / 浅类</td><td>没有用“浅层的”，和 deep 的翻译选择是同样的原因</td></tr><tr><td>web browser / server</td><td>Web 浏览器 / Web 服务器</td><td>没有用“网络”或“网页”是希望避免与 network 和 web page 等术语的翻译混淆，就保留英文了</td></tr></tbody></table>',9))])}const y=i(p,[["render",g]]),k=JSON.parse('{"path":"/","title":"简介","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"翻译说明","slug":"翻译说明","link":"#翻译说明","children":[]},{"level":2,"title":"术语翻译","slug":"术语翻译","link":"#术语翻译","children":[]}],"git":{"updatedTime":1744082517000,"contributors":[{"name":"yingang","username":"yingang","email":"1246410+yingang@users.noreply.github.com","commits":1,"url":"https://github.com/yingang"}],"changelog":[{"hash":"773de20e521064e4549d245555e3397d687d5177","time":1744082517000,"email":"1246410+yingang@users.noreply.github.com","author":"Gang Yin","message":"update ci script"}]},"filePathRelative":"README.md"}');export{y as comp,k as data};
