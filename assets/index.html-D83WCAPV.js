import{_ as a}from"./douban-DT6lsHYO.js";import{_ as i,c as h,a as n,b as e,d as r,w as o,r as s,o as u,e as d}from"./app-s25-7jI4.js";const p={};function g(f,t){const l=s("RouteLink");return u(),h("div",null,[t[23]||(t[23]=n('<h1 id="簡介" tabindex="-1"><a class="header-anchor" href="#簡介"><span>簡介</span></a></h1><p><img src="'+a+'" alt=""></p><p>這是一本關於軟體設計的書（英文原名：A Philosophy of Software Design）：如何將複雜的軟體系統分解成模組（比如類和方法），以便這些模組可以相對獨立地實現。本書首先介紹了軟體設計的基本問題，也就是對複雜性的管理，然後討論了一些在完成軟體設計的過程中涉及到的哲學問題，並提出了一系列可以在軟體設計過程中應用的設計原則。本書還介紹了一些可用來識別設計問題的危險訊號。你可以透過應用本書中的想法來減少大型軟體系統的複雜性，以便能更快地編寫軟體。</p><h2 id="目錄" tabindex="-1"><a class="header-anchor" href="#目錄"><span>目錄</span></a></h2>',4)),e("ul",null,[e("li",null,[r(l,{to:"/zh-tw/preface.html"},{default:o(()=>t[0]||(t[0]=[d("前言")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch01.html"},{default:o(()=>t[1]||(t[1]=[d("第 1 章 介紹")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch02.html"},{default:o(()=>t[2]||(t[2]=[d("第 2 章 複雜性的本質")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch03.html"},{default:o(()=>t[3]||(t[3]=[d("第 3 章 能工作的程式碼是不夠的")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch04.html"},{default:o(()=>t[4]||(t[4]=[d("第 4 章 模組應該是深的")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch05.html"},{default:o(()=>t[5]||(t[5]=[d("第 5 章 資訊隱藏和資訊洩露")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch06.html"},{default:o(()=>t[6]||(t[6]=[d("第 6 章 通用的模組是更深的")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch07.html"},{default:o(()=>t[7]||(t[7]=[d("第 7 章 不同的層級，不同的抽象")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch08.html"},{default:o(()=>t[8]||(t[8]=[d("第 8 章 下沉複雜性")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch09.html"},{default:o(()=>t[9]||(t[9]=[d("第 9 章 在一起更好還是分開更好？")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch10.html"},{default:o(()=>t[10]||(t[10]=[d("第 10 章 透過定義來規避錯誤")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch11.html"},{default:o(()=>t[11]||(t[11]=[d("第 11 章 設計兩次")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch12.html"},{default:o(()=>t[12]||(t[12]=[d("第 12 章 不寫註釋的四個藉口")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch13.html"},{default:o(()=>t[13]||(t[13]=[d("第 13 章 註釋應該描述程式碼中難以理解的內容")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch14.html"},{default:o(()=>t[14]||(t[14]=[d("第 14 章 選取名稱")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch15.html"},{default:o(()=>t[15]||(t[15]=[d("第 15 章 先寫註釋")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch16.html"},{default:o(()=>t[16]||(t[16]=[d("第 16 章 修改現有的程式碼")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch17.html"},{default:o(()=>t[17]||(t[17]=[d("第 17 章 一致性")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch18.html"},{default:o(()=>t[18]||(t[18]=[d("第 18 章 程式碼應該是易理解的")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch19.html"},{default:o(()=>t[19]||(t[19]=[d("第 19 章 軟體發展趨勢")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch20.html"},{default:o(()=>t[20]||(t[20]=[d("第 20 章 效能設計")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/ch21.html"},{default:o(()=>t[21]||(t[21]=[d("第 21 章 結論")])),_:1})]),e("li",null,[r(l,{to:"/zh-tw/summary.html"},{default:o(()=>t[22]||(t[22]=[d("總結")])),_:1})])]),t[24]||(t[24]=n('<h2 id="翻譯說明" tabindex="-1"><a class="header-anchor" href="#翻譯說明"><span>翻譯說明</span></a></h2><p>無意中看到這本書的相關介紹，也很快找到了 GitHub 上的民間翻譯版，因為看到一些翻譯不太恰當的地方，所以想著順手提交修正下，然後找到其中 Star 數量比較多的主要是 <a href="https://github.com/Cactus-proj/A-Philosophy-of-Software-Design-zh" target="_blank" rel="noopener noreferrer">Cactus-proj</a> 和 <a href="https://github.com/Go7hic/A-Philosophy-of-Software-Design" target="_blank" rel="noopener noreferrer">Go7hic</a> 的，但兩者的內容幾乎完全一樣，包括一些翻譯不當的地方也是同樣的。從實質內容的提交歷史來看，應該 Cactus-proj 是更早的提交者，這一點從各自的 Fock/Star 數量也能側面印證。</p><p>這兩個專案均有收到並處理一些內容修正的 PR，但即使是 Cactus-proj，最新的幾個 PR 也處於較長時間未處理的狀態，推測都已經暫停維護了，然後基於 Cactus-proj，包含內容修復最多的是 <a href="https://github.com/luojiego/A-Philosophy-of-Software-Design-zh" target="_blank" rel="noopener noreferrer">luojiego</a> 的 Fork，於是就基於這個建立了自己的 <a href="https://github.com/yingang/aposd-zh" target="_blank" rel="noopener noreferrer">Fork</a>。除了一邊閱讀一邊校對，也摸索著更新了相關的部署指令碼，部署到我自己的 <a href="https://yingang.github.io/aposd-zh/" target="_blank" rel="noopener noreferrer">GitHub Pages</a> 上，可直接線上閱讀。</p><p>從提交歷史來看，<a href="https://github.com/gdut-yy" target="_blank" rel="noopener noreferrer">gdut-yy</a> 應該是主要的翻譯貢獻者，<a href="https://github.com/liquid207" target="_blank" rel="noopener noreferrer">liquid207</a>、<a href="https://github.com/wanghuanwei" target="_blank" rel="noopener noreferrer">wanghuanwei</a>、<a href="https://github.com/luojiego" target="_blank" rel="noopener noreferrer">luojiego</a> 和 <a href="https://github.com/BlackGlory" target="_blank" rel="noopener noreferrer">BlackGlory</a> 也都貢獻了比較多的翻譯修正，<a href="https://github.com/inkydragon" target="_blank" rel="noopener noreferrer">inkydragon</a> 則主要負責了 LaTeX 和 PDF 相關的工作以及格式規範、持續整合等方面的工作，不確定歷史是否挖掘充分，所有提到未提到的貢獻者，一併感謝！</p><p>出於尊重原作版權的考慮，在完整的校訂工作完成之後，我刪除了與中文並列對照的英文內容，對於純英文內容也刪除了主體部分，只保留了前言以及各個章節的概要和總結。如果你在閱讀過程中，發現有翻譯不當的地方，或者有其他建議，歡迎提交相應的 PR 或 Issue。</p><p>另外，同時還基於 <code>opencc</code> 使用 Python 指令碼自動生成了繁體中文的翻譯版本，也一併放在了 <a href="https://yingang.github.io/aposd-zh/zh-tw/" target="_blank" rel="noopener noreferrer">GitHub Pages</a> 上，如果發現有處理不當的內容，請針對該指令碼或對應的簡體中文內容提交 PR 或 Issue。</p><h2 id="術語翻譯" tabindex="-1"><a class="header-anchor" href="#術語翻譯"><span>術語翻譯</span></a></h2><p>翻譯是個比較困難的事情，除了譯者水平有限，也有很多見仁見智的地方，所以這裡先列出一些術語的翻譯選擇和背後的考慮因素，以供參考，並至少在本書籍的翻譯過程中保持相對統一，也歡迎提 Issue 探討。</p><table><thead><tr><th>英文</th><th>中文</th><th>說明</th></tr></thead><tbody><tr><td>bug</td><td>缺陷 / 程式碼缺陷</td><td>沒有用“錯誤”是希望避免與 error 等術語的翻譯混淆</td></tr><tr><td>change</td><td>變更</td><td>針對程式碼的時候，更多使用“變更”而不是“改變”，但根據實際的上下文而定</td></tr><tr><td>clean</td><td>整潔的</td><td>與《程式碼整潔之道》等系列書籍的翻譯保持一致</td></tr><tr><td>complexity</td><td>複雜性</td><td>沒有用“複雜度”，類似的還有“依賴性（dependency）”和“模糊性（obscurity）”</td></tr><tr><td>deep module / class</td><td>深模組 / 深類</td><td>沒有用“深層的”是希望避免與 layer 和 level 等術語的翻譯混淆</td></tr><tr><td>define error out of existence</td><td>透過定義來規避錯誤</td><td>類似的還有“透過設計來規避特殊情況（design special cases out of existence）”</td></tr><tr><td>dispatcher</td><td>分發器</td><td>沒有用“排程器”是希望避免與 scheduler 等術語的翻譯混淆</td></tr><tr><td>information leakage</td><td>資訊洩露</td><td>沒有用“洩漏”</td></tr><tr><td>obvious</td><td>易理解的</td><td>在描述程式碼的特性時一般會譯為“易理解的”（主要是第 13 章和第 18 章），反之就是“難以理解的”，而其他場景下可能仍譯為“明顯的”或“顯而易見的”</td></tr><tr><td>pass-through</td><td>透傳</td><td>用於“透傳方法”、“透傳變數”、“透傳引數”等場景</td></tr><tr><td>public method / variables</td><td>公有方法 / 公有變數</td><td>沒有用“公開”是希望避免與 expose 和 exposure 等術語的翻譯混淆</td></tr><tr><td>selection</td><td>區域選擇 / 選擇的區域 / 所選區域</td><td>影像介面文字編譯器中的示例，直接翻譯成“選擇”會不太清晰</td></tr><tr><td>shallow module / class</td><td>淺模組 / 淺類</td><td>沒有用“淺層的”，和 deep 的翻譯選擇是同樣的原因</td></tr><tr><td>web browser / server</td><td>Web 瀏覽器 / Web 伺服器</td><td>沒有用“網路”或“網頁”是希望避免與 network 和 web page 等術語的翻譯混淆，就保留英文了</td></tr></tbody></table>',9))])}const w=i(p,[["render",g]]),z=JSON.parse('{"path":"/zh-tw/","title":"簡介","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"目錄","slug":"目錄","link":"#目錄","children":[]},{"level":2,"title":"翻譯說明","slug":"翻譯說明","link":"#翻譯說明","children":[]},{"level":2,"title":"術語翻譯","slug":"術語翻譯","link":"#術語翻譯","children":[]}],"git":{"updatedTime":1744082517000,"contributors":[{"name":"yingang","username":"yingang","email":"1246410+yingang@users.noreply.github.com","commits":1,"url":"https://github.com/yingang"}],"changelog":[{"hash":"773de20e521064e4549d245555e3397d687d5177","time":1744082517000,"email":"1246410+yingang@users.noreply.github.com","author":"Gang Yin","message":"update ci script"}]},"filePathRelative":"zh-tw/README.md"}');export{w as comp,z as data};
