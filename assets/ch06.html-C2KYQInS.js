import{_ as a,c as t,a as s,o}from"./app-s25-7jI4.js";const n={};function r(i,e){return o(),t("div",null,e[0]||(e[0]=[s('<h1 id="chapter-6-general-purpose-modules-are-deeper" tabindex="-1"><a class="header-anchor" href="#chapter-6-general-purpose-modules-are-deeper"><span>Chapter 6 General-Purpose Modules are Deeper</span></a></h1><p>One of the most common decisions that you will face when designing a new module is whether to implement it in a general-purpose or special-purpose fashion. Some might argue that you should take a general-purpose approach, in which you implement a mechanism that can be used to address a broad range of problems, not just the ones that are important today. In this case, the new mechanism may find unanticipated uses in the future, thereby saving time. The general-purpose approach seems consistent with the investment mindset discussed in Chapter 3, where you spend a bit more time up front to save time later on.</p><p>On the other hand, we know that it’s hard to predict the future needs of a software system, so a general-purpose solution might include facilities that are never actually needed. Furthermore, if you implement something that is too general-purpose, it might not do a good job of solving the particular problem you have today. As a result, some might argue that it’s better to focus on today’s needs, building just what you know you need, and specializing it for the way you plan to use it today. If you take the special-purpose approach and discover additional uses later, you can always refactor it to make it general-purpose. The special-purpose approach seems consistent with an incremental approach to software development.</p><h2 id="_6-1-make-classes-somewhat-general-purpose" tabindex="-1"><a class="header-anchor" href="#_6-1-make-classes-somewhat-general-purpose"><span>6.1 Make classes somewhat general-purpose</span></a></h2><h2 id="_6-2-example-storing-text-for-an-editor" tabindex="-1"><a class="header-anchor" href="#_6-2-example-storing-text-for-an-editor"><span>6.2 Example: storing text for an editor</span></a></h2><h2 id="_6-3-a-more-general-purpose-api" tabindex="-1"><a class="header-anchor" href="#_6-3-a-more-general-purpose-api"><span>6.3 A more general-purpose API</span></a></h2><h2 id="_6-4-generality-leads-to-better-information-hiding" tabindex="-1"><a class="header-anchor" href="#_6-4-generality-leads-to-better-information-hiding"><span>6.4 Generality leads to better information hiding</span></a></h2><h2 id="_6-5-questions-to-ask-yourself" tabindex="-1"><a class="header-anchor" href="#_6-5-questions-to-ask-yourself"><span>6.5 Questions to ask yourself</span></a></h2><h2 id="_6-6-conclusion" tabindex="-1"><a class="header-anchor" href="#_6-6-conclusion"><span>6.6 Conclusion</span></a></h2><p>General-purpose interfaces have many advantages over special-purpose ones. They tend to be simpler, with fewer methods that are deeper. They also provide a cleaner separation between classes, whereas special-purpose interfaces tend to leak information between classes. Making your modules somewhat general-purpose is one of the best ways to reduce overall system complexity.</p>',10)]))}const p=a(n,[["render",r]]),h=JSON.parse('{"path":"/en/ch06.html","title":"Chapter 6 General-Purpose Modules are Deeper","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"6.1 Make classes somewhat general-purpose","slug":"_6-1-make-classes-somewhat-general-purpose","link":"#_6-1-make-classes-somewhat-general-purpose","children":[]},{"level":2,"title":"6.2 Example: storing text for an editor","slug":"_6-2-example-storing-text-for-an-editor","link":"#_6-2-example-storing-text-for-an-editor","children":[]},{"level":2,"title":"6.3 A more general-purpose API","slug":"_6-3-a-more-general-purpose-api","link":"#_6-3-a-more-general-purpose-api","children":[]},{"level":2,"title":"6.4 Generality leads to better information hiding","slug":"_6-4-generality-leads-to-better-information-hiding","link":"#_6-4-generality-leads-to-better-information-hiding","children":[]},{"level":2,"title":"6.5 Questions to ask yourself","slug":"_6-5-questions-to-ask-yourself","link":"#_6-5-questions-to-ask-yourself","children":[]},{"level":2,"title":"6.6 Conclusion","slug":"_6-6-conclusion","link":"#_6-6-conclusion","children":[]}],"git":{"updatedTime":1744082517000,"contributors":[{"name":"yingang","username":"yingang","email":"1246410+yingang@users.noreply.github.com","commits":1,"url":"https://github.com/yingang"}],"changelog":[{"hash":"773de20e521064e4549d245555e3397d687d5177","time":1744082517000,"email":"1246410+yingang@users.noreply.github.com","author":"Gang Yin","message":"update ci script"}]},"filePathRelative":"en/ch06.md"}');export{p as comp,h as data};
